
lab4_v0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000378  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000835  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000655  00000000  00000000  00000c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000610  00000000  00000000  0000127a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  0000188c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ae  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001dd  00000000  00000000  00001d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001f3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_9>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_11>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  64:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ISR_timerOVF>:
 #include <avr/io.h>
 #define curNumberIndex 0x73;
.global ISR_timerOVF
	ISR_timerOVF: ;Interrrupt Handler Timer OVF

		ldi XH, hi8(RAMSTART);New Code For C compatibility so that anyone can mess up with X in main
  6c:	b0 e0       	ldi	r27, 0x00	; 0
		ldi XL ,curNumberIndex
  6e:	a3 e7       	ldi	r26, 0x73	; 115
		ld r17,X+
  70:	1d 91       	ld	r17, X+
		ld r19,X
  72:	3c 91       	ld	r19, X
		ldi r16,0x64 ; start from 100 = 256 - (156)
  74:	04 e6       	ldi	r16, 0x64	; 100
		out _SFR_IO_ADDR(TCNT0), r16 ;New Code For C compatibility
  76:	02 bf       	out	0x32, r16	; 50
		;out TCNT0,r16	;setting timer from the start so that we where as close as possible to the theoretical estimation
		
		;loading block starÏ„
		ldi	XL, lo8(RAMSTART)	;New Code For C compatibility
  78:	a0 e6       	ldi	r26, 0x60	; 96
		add XL,r17				;New Code For C compatibility
  7a:	a1 0f       	add	r26, r17
		inc XL					;New Code For C compatibility
  7c:	a3 95       	inc	r26
		inc r17
  7e:	13 95       	inc	r17
		cpi r17,0x08 ;gives Zflag = 1 when r17-0x07=0 ;;first time program enters here is imporetant to branch so that everything works as designed
  80:	18 30       	cpi	r17, 0x08	; 8
		breq if1
  82:	19 f0       	breq	.+6      	; 0x8a <if1>
		LSL r19 ;R19 Is the output for C port
  84:	33 0f       	add	r19, r19
		ld r18,X+ ;r18 has the value of the Number we gonna display is bsd
  86:	2d 91       	ld	r18, X+
		rjmp endif1
  88:	04 c0       	rjmp	.+8      	; 0x92 <endif1>

0000008a <if1>:
		if1: 
			ldi r19,0x01;R19 Is the output for C port
  8a:	31 e0       	ldi	r19, 0x01	; 1
			ldi r17,0x00
  8c:	10 e0       	ldi	r17, 0x00	; 0
			subi XL,8 ; X pointer register only low part ;
  8e:	a8 50       	subi	r26, 0x08	; 8
			ld r18,X+ ;r18 has the value of the Number we gonna display is bsd
  90:	2d 91       	ld	r18, X+

00000092 <endif1>:
		endif1:
	;loading block end
	;decoder Start----------
		ldi r16,8
  92:	08 e0       	ldi	r16, 0x08	; 8
		ldi	XL, lo8(RAMSTART)	
  94:	a0 e6       	ldi	r26, 0x60	; 96
		add XL,r16				; initialize X pointer to SRAM_START+8
  96:	a0 0f       	add	r26, r16
		add XL,r18 ;r18 is the number we want to show
  98:	a2 0f       	add	r26, r18
		ld r20,X
  9a:	4c 91       	ld	r20, X
		;START OF OUT
		;out C port r16 close all Anodes -ADD STUFFS-
		ldi r16, 0b00000000 ;Anodes for SSDs
  9c:	00 e0       	ldi	r16, 0x00	; 0
		out _SFR_IO_ADDR(PORTC), r16
  9e:	05 bb       	out	0x15, r16	; 21
		;out B port r20 6 down to 0 -> a down to g -ADD STUFFS-
		out _SFR_IO_ADDR(PORTA), r20
  a0:	4b bb       	out	0x1b, r20	; 27
		;out C port r19 7 down to 0 -> MSDecimal(7) to LSDecimal(0) anodes -ADD STUFFS-
		out _SFR_IO_ADDR(PORTC), r19
  a2:	35 bb       	out	0x15, r19	; 21
		;-END OF OUT
		ldi XL ,curNumberIndex
  a4:	a3 e7       	ldi	r26, 0x73	; 115
		st X+,r17
  a6:	1d 93       	st	X+, r17
		st X,r19
  a8:	3c 93       	st	X, r19
	;decoder End
		reti
  aa:	18 95       	reti

000000ac <ISR_USART_Receive>:
 #define BYTEOUTstate 0x02;
 #define CRWAITstate 0x03;
 #define LFWAITstate 0x04;

 #define ControlUsart 0x75;
	ldi XH,0x00			//New Code For C compatibility
  ac:	b0 e0       	ldi	r27, 0x00	; 0
	ldi XL,ControlUsart
  ae:	a5 e7       	ldi	r26, 0x75	; 117
	in r18,  _SFR_IO_ADDR(UDR) ;->REAL CODE
  b0:	2c b1       	in	r18, 0x0c	; 12
	in r18, _SFR_IO_ADDR(UDR) ;->REAL CODE
  b2:	2c b1       	in	r18, 0x0c	; 12
	mov r18,r15	 ;->`TESTING CODE
  b4:	2f 2d       	mov	r18, r15
	ld r20,X ;r20 Is the register with the state
  b6:	4c 91       	ld	r20, X
	;STATE MANAGMENT
	;Jump To The Correct State Handler--
	cpi r20,INITstate ;INIT
  b8:	40 30       	cpi	r20, 0x00	; 0
	breq INIT
  ba:	41 f0       	breq	.+16     	; 0xcc <INIT>
	cpi r20,TWAITstate ;T	Just waiting for T in this state
  bc:	41 30       	cpi	r20, 0x01	; 1
	breq TWAIT
  be:	29 f1       	breq	.+74     	; 0x10a <TWAIT>
	cpi r20,BYTEOUTstate ;ByteOut
  c0:	42 30       	cpi	r20, 0x02	; 2
	breq BYTEOUT
  c2:	29 f1       	breq	.+74     	; 0x10e <BYTEOUT>
	cpi r20,CRWAITstate ;<CR>
  c4:	43 30       	cpi	r20, 0x03	; 3
	breq CRWAIT
  c6:	a9 f1       	breq	.+106    	; 0x132 <CRWAIT>
	cpi r20,LFWAITstate ;<CR> when you are at <CR> you wait for <LF> print Ok and then make the state==INIT
  c8:	44 30       	cpi	r20, 0x04	; 4
	breq LFWAIT
  ca:	a9 f1       	breq	.+106    	; 0x136 <LFWAIT>

000000cc <INIT>:
	;end-------------------------------
	;Handlers=function(r18(char se ascii),r20(currentState))
	;Receive in r18 the value Of UDR
	INIT:
	cpi r18,0x41;r18==A
  cc:	21 34       	cpi	r18, 0x41	; 65
	breq controlif1
  ce:	21 f0       	breq	.+8      	; 0xd8 <controlif1>
	cpi r18,0x4E;r18==N
  d0:	2e 34       	cpi	r18, 0x4E	; 78
	breq controlif2
  d2:	21 f0       	breq	.+8      	; 0xdc <controlif2>
	cpi r18,0x43;r18==C
  d4:	23 34       	cpi	r18, 0x43	; 67
	breq controlif3
  d6:	69 f0       	breq	.+26     	; 0xf2 <controlif3>

000000d8 <controlif1>:

	controlif1:;r18==A
		ldi r20,TWAITstate ;nextsState=TWAITstate
  d8:	41 e0       	ldi	r20, 0x01	; 1
		rjmp return1
  da:	31 c0       	rjmp	.+98     	; 0x13e <return1>

000000dc <controlif2>:

	controlif2:;r18==N
		;rcall clearAllBytes ;uses r18 but we dont use it from now on
		ldi	XL,lo8(RAMSTART)		; initialize X pointer
  dc:	a0 e6       	ldi	r26, 0x60	; 96
		ldi	XH,hi8(RAMSTART)		
  de:	b0 e0       	ldi	r27, 0x00	; 0
		ldi r18,0x08
  e0:	28 e0       	ldi	r18, 0x08	; 8
		add r18,XL ;R18=XL+8
  e2:	2a 0f       	add	r18, r26

000000e4 <whileLoop3>:
		;whileLoop With init start
		whileLoop3:
		cp XL,r18 ;gives Zflag = 1 when r18-0x08=0 ;
  e4:	a2 17       	cp	r26, r18
		breq if3				;escape while loop
  e6:	19 f0       	breq	.+6      	; 0xee <if3>
			ldi r16,0x0A		;r16=0x0A=CLOSED SEGMENTS /NO LIGHT
  e8:	0a e0       	ldi	r16, 0x0A	; 10
			st x+,r16			;store the new value also increment x for next loop x=x+1
  ea:	0d 93       	st	X+, r16
			rjmp whileLoop3
  ec:	fb cf       	rjmp	.-10     	; 0xe4 <whileLoop3>

000000ee <if3>:
		if3: 
		;whileLoop End
		ldi r20,BYTEOUTstate ;nextsState=BYTEOUTstate
  ee:	42 e0       	ldi	r20, 0x02	; 2
		rjmp return1
  f0:	26 c0       	rjmp	.+76     	; 0x13e <return1>

000000f2 <controlif3>:

	controlif3:;r18==C
		;rcall clearAllBytes ;uses r18 but we dont use it from now on
		ldi	XL,lo8(RAMSTART)		; initialize X pointer
  f2:	a0 e6       	ldi	r26, 0x60	; 96
		ldi	XH,hi8(RAMSTART)		
  f4:	b0 e0       	ldi	r27, 0x00	; 0
		ldi r18,0x08
  f6:	28 e0       	ldi	r18, 0x08	; 8
		add r18,XL ;R18=XL+8
  f8:	2a 0f       	add	r18, r26

000000fa <whileLoop4>:
		;whileLoop With init start
		whileLoop4:
		cp XL,r18 ;gives Zflag = 1 when r18-0x08=0 ;
  fa:	a2 17       	cp	r26, r18
		breq if4				;escape while loop
  fc:	19 f0       	breq	.+6      	; 0x104 <if4>
			ldi r16,0x0A		;r16=0x0A=CLOSED SEGMENTS /NO LIGHT
  fe:	0a e0       	ldi	r16, 0x0A	; 10
			st x+,r16			;store the new value also increment x for next loop x=x+1
 100:	0d 93       	st	X+, r16
			rjmp whileLoop4
 102:	fb cf       	rjmp	.-10     	; 0xfa <whileLoop4>

00000104 <if4>:
		if4: 
		;whileLoop End
		ldi r20,CRWAITstate ;CRWAITstate
 104:	43 e0       	ldi	r20, 0x03	; 3
		rjmp return1
 106:	1b c0       	rjmp	.+54     	; 0x13e <return1>
	;Handler(r18(char se ascii),r20(currentState))
	rjmp return1
 108:	1a c0       	rjmp	.+52     	; 0x13e <return1>

0000010a <TWAIT>:

	TWAIT:
		ldi r20,CRWAITstate ;<CR>
 10a:	43 e0       	ldi	r20, 0x03	; 3
	;Handler(r18(char se ascii),r20(currentState))
	rjmp return1
 10c:	18 c0       	rjmp	.+48     	; 0x13e <return1>

0000010e <BYTEOUT>:
	
	BYTEOUT:
	cpi r18,0x0D;If inserted character = <CR>
 10e:	2d 30       	cpi	r18, 0x0D	; 13
	breq controlif4
 110:	71 f0       	breq	.+28     	; 0x12e <controlif4>
		andi r18,0b00001111 ;Setting Mask to make the number from ASCII to BSD
 112:	2f 70       	andi	r18, 0x0F	; 15

00000114 <shiftAllBytesRight>:
							;r18 is the BSD number
		;rcall shiftAllBytesRight	;This Function Changes r20 and r18 /r18 doesn't matter to us
		shiftAllBytesRight:
		ldi	XL,lo8(RAMSTART)		; initialize X pointer
 114:	a0 e6       	ldi	r26, 0x60	; 96
		ldi	XH,hi8(RAMSTART)		
 116:	b0 e0       	ldi	r27, 0x00	; 0
		ldi r20,0x08
 118:	48 e0       	ldi	r20, 0x08	; 8
		add r20,XL ;R20=XL+8
 11a:	4a 0f       	add	r20, r26

0000011c <whileLoop2>:
		;whileLoop With init start
		;ldi r18,0x01
		;ld r18,x ;Init -> The first time in while Loop r16 get the right number Inserted Number
		whileLoop2:
		cp XL,r20 ;gives Zflag = 1 when r20-0x08=0 ;
 11c:	a4 17       	cp	r26, r20
		breq if2 ;escape while loop
 11e:	29 f0       	breq	.+10     	; 0x12a <if2>
			mov r16,r18		;r16=r18=last Byte not Yet Shifted
 120:	02 2f       	mov	r16, r18
			inc xl			;We save next Byte 
 122:	a3 95       	inc	r26
			ld r18,-x		;we save to r18 for next loop and then go back in ram to
 124:	2e 91       	ld	r18, -X
			st x+,r16		;store the new value also increrment x for next loop x=x+1
 126:	0d 93       	st	X+, r16
			rjmp whileLoop2
 128:	f9 cf       	rjmp	.-14     	; 0x11c <whileLoop2>

0000012a <if2>:
		if2: 
		;whileLoop End
		ldi r20,BYTEOUTstate		;But We Want to keep r20(STATE) until we save it to RAM
 12a:	42 e0       	ldi	r20, 0x02	; 2
	rjmp return1
 12c:	08 c0       	rjmp	.+16     	; 0x13e <return1>

0000012e <controlif4>:
	controlif4:;IF CR is imported
		ldi r20,LFWAITstate
 12e:	44 e0       	ldi	r20, 0x04	; 4
	rjmp return1
 130:	06 c0       	rjmp	.+12     	; 0x13e <return1>

00000132 <CRWAIT>:

	CRWAIT:
		ldi r20,LFWAITstate ;<CR>
 132:	44 e0       	ldi	r20, 0x04	; 4
	rjmp return1
 134:	04 c0       	rjmp	.+8      	; 0x13e <return1>

00000136 <LFWAIT>:
	
	LFWAIT:
		ldi r21,0xFF
 136:	5f ef       	ldi	r21, 0xFF	; 255
		ldi r20,INITstate ;<CR>
 138:	40 e0       	ldi	r20, 0x00	; 0
		;MUST PRINT OK
		//rjmp USART_Transmit_OK
			; Wait for data to be transmitted
			rcall USART_Transmit_OK
 13a:	a9 d0       	rcall	.+338    	; 0x28e <USART_Transmit_OK>
	rjmp return1
 13c:	00 c0       	rjmp	.+0      	; 0x13e <return1>

0000013e <return1>:
	
	return1:
	ldi XL,ControlUsart
 13e:	a5 e7       	ldi	r26, 0x75	; 117
	st X,r20 ;Store the new State to Memory
 140:	4c 93       	st	X, r20
	ldi	XL, lo8(RAMSTART) ;getting the X pointer where it was before decoder block
 142:	a0 e6       	ldi	r26, 0x60	; 96
	add XL,r17
 144:	a1 0f       	add	r26, r17
 146:	18 95       	reti

00000148 <__vector_9>:

extern void ISR_timerOVF(void);
extern void ISR_USART_Receive(void);


ISR(TIMER0_OVF_vect){
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	ISR_timerOVF();
 16a:	0e 94 36 00 	call	0x6c	; 0x6c <ISR_timerOVF>
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	bf 91       	pop	r27
 174:	af 91       	pop	r26
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	7f 91       	pop	r23
 17c:	6f 91       	pop	r22
 17e:	5f 91       	pop	r21
 180:	4f 91       	pop	r20
 182:	3f 91       	pop	r19
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <__vector_11>:
ISR(USART_RXC_vect){
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
	ISR_USART_Receive();
 1b2:	0e 94 56 00 	call	0xac	; 0xac <ISR_USART_Receive>
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <USART_Init>:
}

void USART_Init( unsigned int ubrr)
{
    unsigned char *curState=(unsigned char *) 0x75;//set state init
	*curState=(unsigned char)0x00;
 1d8:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
	/* Set baud rate */
    UBRRH = (unsigned char)(ubrr>>8);
 1dc:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char)ubrr;
 1de:	89 b9       	out	0x09, r24	; 9
    /*Setting 0*/
    UCSRA=(unsigned char)0x00;
 1e0:	1b b8       	out	0x0b, r1	; 11
    /* Enable receiver and transmitter */
    UCSRB = (1<<RXCIE)|(0<<UDRIE)|(1<<RXEN)|(1<<TXEN);
 1e2:	88 e9       	ldi	r24, 0x98	; 152
 1e4:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 2stop bit */
    UCSRC = (0<<URSEL)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	80 bd       	out	0x20, r24	; 32
 1ea:	08 95       	ret

000001ec <TIMER0_Init>:
}

void TIMER0_Init(void){
    
    TCNT0= (unsigned char ) 100;
 1ec:	84 e6       	ldi	r24, 0x64	; 100
 1ee:	82 bf       	out	0x32, r24	; 50
    TIMSK= (1<<TOIE0); //mask on
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	89 bf       	out	0x39, r24	; 57
    TCCR0= (1<<CS02); //prescaller cs2cs1cs0 was 0x03 now 0x04 for nearly 30hz 
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	83 bf       	out	0x33, r24	; 51
 1f8:	08 95       	ret

000001fa <INIT>:


void INIT(){
	//memory map for data
	unsigned char *displayNumbers=(unsigned char *) 0x60;
	displayNumbers[0]=(unsigned char)0x05;
 1fa:	85 e0       	ldi	r24, 0x05	; 5
 1fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	displayNumbers[1]=(unsigned char)0x06;
 200:	86 e0       	ldi	r24, 0x06	; 6
 202:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
	displayNumbers[2]=(unsigned char)0x07;
 206:	97 e0       	ldi	r25, 0x07	; 7
 208:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
	displayNumbers[3]=(unsigned char)0x08;
 20c:	28 e0       	ldi	r18, 0x08	; 8
 20e:	20 93 63 00 	sts	0x0063, r18	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	displayNumbers[4]=(unsigned char)0x09;
 212:	29 e0       	ldi	r18, 0x09	; 9
 214:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
	displayNumbers[5]=(unsigned char)0x00;
 218:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
	displayNumbers[6]=(unsigned char)0x01;
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
	displayNumbers[7]=(unsigned char)0x02;
 222:	32 e0       	ldi	r19, 0x02	; 2
 224:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
	unsigned char *seven_segment_decoder=(unsigned char *) 0x68;
	seven_segment_decoder[0]=(unsigned char)0b00000001; //0
 228:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	seven_segment_decoder[1]=(unsigned char)0b01001111; //1
 22c:	2f e4       	ldi	r18, 0x4F	; 79
 22e:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	seven_segment_decoder[2]=(unsigned char)0b00010010; //2
 232:	22 e1       	ldi	r18, 0x12	; 18
 234:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
	seven_segment_decoder[3]=(unsigned char)0b00000110; //3
 238:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
	seven_segment_decoder[4]=(unsigned char)0b01001100; //4
 23c:	8c e4       	ldi	r24, 0x4C	; 76
 23e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	seven_segment_decoder[5]=(unsigned char)0b00100100; //5
 242:	84 e2       	ldi	r24, 0x24	; 36
 244:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
	seven_segment_decoder[6]=(unsigned char)0b00100000; //6
 248:	80 e2       	ldi	r24, 0x20	; 32
 24a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	seven_segment_decoder[7]=(unsigned char)0b00001111; //7
 24e:	8f e0       	ldi	r24, 0x0F	; 15
 250:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	seven_segment_decoder[8]=(unsigned char)0b00000000; //8
 254:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	seven_segment_decoder[9]=(unsigned char)0b00000100; //9
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
	seven_segment_decoder[10]=(unsigned char)0b11111111; //A
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
	unsigned char *curNumberIndex=(unsigned char *) 0x73; //r17 value
	*curNumberIndex=(unsigned char)0x07;
 264:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__DATA_REGION_ORIGIN__+0x13>
	unsigned char *ringCounter=(unsigned char *) 0x74; //r17 value
	*ringCounter=(unsigned char)0x80;
 268:	90 e8       	ldi	r25, 0x80	; 128
 26a:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
	
	//masks for ports a and c
	//i just realise in the past labs i use port B as my port A
	//so i fixed this in this one
	DDRC=(unsigned char) 0xff;
 26e:	84 bb       	out	0x14, r24	; 20
	DDRA=(unsigned char)0b01111111;
 270:	8f e7       	ldi	r24, 0x7F	; 127
 272:	8a bb       	out	0x1a, r24	; 26
	asm("nop");
 274:	00 00       	nop


    unsigned int ubrr= (unsigned int)UBRR;

    USART_Init(ubrr);
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	9f ef       	ldi	r25, 0xFF	; 255
 27a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <USART_Init>
    TIMER0_Init();
 27e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <TIMER0_Init>
	sei();
 282:	78 94       	sei
 284:	08 95       	ret

00000286 <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 286:	5d 9b       	sbis	0x0b, 5	; 11
 288:	fe cf       	rjmp	.-4      	; 0x286 <USART_Transmit>
;
/* Put data into buffer, sends the data */
TCNT2 = data;
 28a:	84 bd       	out	0x24, r24	; 36
 28c:	08 95       	ret

0000028e <USART_Transmit_OK>:
}

void USART_Transmit_OK( unsigned char data )
{
USART_Transmit((unsigned char)0x4F); //O
 28e:	8f e4       	ldi	r24, 0x4F	; 79
 290:	0e 94 43 01 	call	0x286	; 0x286 <USART_Transmit>
USART_Transmit((unsigned char)0x4B); //K
 294:	8b e4       	ldi	r24, 0x4B	; 75
 296:	0e 94 43 01 	call	0x286	; 0x286 <USART_Transmit>
USART_Transmit((unsigned char)0x0D); //<CR>
 29a:	8d e0       	ldi	r24, 0x0D	; 13
 29c:	0e 94 43 01 	call	0x286	; 0x286 <USART_Transmit>
USART_Transmit((unsigned char)0x0A); //<LF>
 2a0:	8a e0       	ldi	r24, 0x0A	; 10
 2a2:	0e 94 43 01 	call	0x286	; 0x286 <USART_Transmit>
 2a6:	08 95       	ret

000002a8 <main>:
}


int main(void)
{
	INIT();
 2a8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <INIT>
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <main+0x4>

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
