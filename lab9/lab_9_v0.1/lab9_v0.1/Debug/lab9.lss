
lab9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e5  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000601  00000000  00000000  00000981  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fc  00000000  00000000  00000f82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000381  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000171  00000000  00000000  000016e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001852  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_1>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_9>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  64:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_9>:
void TIMER0_Init(void);
void TIMER0_Init(void);
void EXTERNAL_INTERRUPTS_Init(void);

//INTERRUPTS
ISR(TIMER0_OVF_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	8f 93       	push	r24
  82:	9f 93       	push	r25
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	00 d0       	rcall	.+0      	; 0x8a <__vector_9+0x1e>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	TCNT0= (unsigned char ) 100;
  8e:	84 e6       	ldi	r24, 0x64	; 100
  90:	82 bf       	out	0x32, r24	; 50
	unsigned char *lastInputMem = (unsigned char *)0x60;
	unsigned char *stableSignalCounterMem = (unsigned char *)0x61;
	unsigned char volatile bitA,nbitA;
	//Getting lastInput and stableSignalCounter from Memory
	unsigned char lastInput = *lastInputMem;
  92:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	unsigned char stableSignalCounter = *stableSignalCounterMem;
  96:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
	//Getting Current Inputs Stable or Unstable
	//Abit
	bitA=PINA>>PINA0;
  9a:	99 b3       	in	r25, 0x19	; 25
  9c:	99 83       	std	Y+1, r25	; 0x01
	bitA=bitA & 0x01;
  9e:	99 81       	ldd	r25, Y+1	; 0x01
  a0:	91 70       	andi	r25, 0x01	; 1
  a2:	99 83       	std	Y+1, r25	; 0x01
	//A'bit
	nbitA=PINA>>PINA1;
  a4:	99 b3       	in	r25, 0x19	; 25
  a6:	96 95       	lsr	r25
  a8:	9a 83       	std	Y+2, r25	; 0x02
	nbitA=nbitA & 0x01;
  aa:	9a 81       	ldd	r25, Y+2	; 0x02
  ac:	91 70       	andi	r25, 0x01	; 1
  ae:	9a 83       	std	Y+2, r25	; 0x02
	//LOGIC
	if( stableSignalCounter==0x00 && (lastInput != bitA || lastInput != (~nbitA & 0x01)) ){
  b0:	81 11       	cpse	r24, r1
  b2:	0f c0       	rjmp	.+30     	; 0xd2 <__vector_9+0x66>
  b4:	99 81       	ldd	r25, Y+1	; 0x01
  b6:	29 13       	cpse	r18, r25
  b8:	0a c0       	rjmp	.+20     	; 0xce <__vector_9+0x62>
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	6a 81       	ldd	r22, Y+2	; 0x02
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	96 27       	eor	r25, r22
  c2:	49 2f       	mov	r20, r25
  c4:	41 70       	andi	r20, 0x01	; 1
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	24 17       	cp	r18, r20
  ca:	35 07       	cpc	r19, r21
  cc:	11 f0       	breq	.+4      	; 0xd2 <__vector_9+0x66>
		stableSignalCounter++;
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	0d c0       	rjmp	.+26     	; 0xec <__vector_9+0x80>
	}
	else if(stableSignalCounter==0x0A){
  d2:	8a 30       	cpi	r24, 0x0A	; 10
  d4:	49 f4       	brne	.+18     	; 0xe8 <__vector_9+0x7c>
		stableSignalCounter = 0x00;
		*lastInputMem=bitA;
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		PORTA = bitA<<PA2;
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	88 0f       	add	r24, r24
  e0:	88 0f       	add	r24, r24
  e2:	8b bb       	out	0x1b, r24	; 27
	//LOGIC
	if( stableSignalCounter==0x00 && (lastInput != bitA || lastInput != (~nbitA & 0x01)) ){
		stableSignalCounter++;
	}
	else if(stableSignalCounter==0x0A){
		stableSignalCounter = 0x00;
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <__vector_9+0x80>
		*lastInputMem=bitA;
		PORTA = bitA<<PA2;
	}
	else if(stableSignalCounter>0x00){
  e8:	81 11       	cpse	r24, r1
		stableSignalCounter++;
  ea:	8f 5f       	subi	r24, 0xFF	; 255
	}
	*stableSignalCounterMem=stableSignalCounter;
  ec:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
	
	
}
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	6f 91       	pop	r22
  fe:	5f 91       	pop	r21
 100:	4f 91       	pop	r20
 102:	3f 91       	pop	r19
 104:	2f 91       	pop	r18
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <__vector_1>:

//External Interrupt Handlers(PD4 is Output)

ISR(INT0_vect){//PD2 is INT0->SET (FALLING EDGE MEANS PD4=0)
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
	PORTD=0<<PD4;
 11a:	12 ba       	out	0x12, r1	; 18
}
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <__vector_2>:

ISR(INT1_vect){//PD3 is INT1->RESET (FALLING EDGE MEANS PD4=1)
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	8f 93       	push	r24
	PORTD|=1<<PD4;
 132:	82 b3       	in	r24, 0x12	; 18
 134:	80 61       	ori	r24, 0x10	; 16
 136:	82 bb       	out	0x12, r24	; 18
}
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <TIMER0_Init>:
	return;
}


void TIMER0_Init(void){
	TCNT0= (unsigned char ) 100;
 144:	84 e6       	ldi	r24, 0x64	; 100
 146:	82 bf       	out	0x32, r24	; 50
	TIMSK= (1<<TOIE0);	//mask on
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	89 bf       	out	0x39, r24	; 57
	TCCR0= 0x03;		// Prescaler Bits cs2cs1cs0 was 0x04 now 0x03 for nearly 1ms
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	83 bf       	out	0x33, r24	; 51
 150:	08 95       	ret

00000152 <EXTERNAL_INTERRUPTS_Init>:
}

void EXTERNAL_INTERRUPTS_Init(void){
	unsigned char * QMem =(unsigned char *)0x62;
	*QMem=0x00;
 152:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
	GICR|=(1<<INT0)|(1<<INT1);
 156:	8b b7       	in	r24, 0x3b	; 59
 158:	80 6c       	ori	r24, 0xC0	; 192
 15a:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 0b00001010; //isc11,isc10 and isc01,isc00 both set to -> 01 (Any logical change will trigger them)
 15c:	85 b7       	in	r24, 0x35	; 53
 15e:	8a 60       	ori	r24, 0x0A	; 10
 160:	85 bf       	out	0x35, r24	; 53
 162:	08 95       	ret

00000164 <INIT>:

void INIT(){
	//MEMORY MAP DATA
	unsigned char * lastInputMem =(unsigned char *)0x60;
	unsigned char * stableSignalCounterMem =(unsigned char *)0x61;
	*lastInputMem=0X00;
 164:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	*stableSignalCounterMem=0x00;
 168:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
	
	//SETTING DATA DIRECTION REGISTERS
	DDRA=(unsigned char)0b01111100;	//PA0 PA1 PINs PA2			->Sampling
 16c:	8c e7       	ldi	r24, 0x7C	; 124
 16e:	8a bb       	out	0x1a, r24	; 26
	DDRD=(unsigned char)0b11110011; //PD2(INT0) PD3(INT1) PINs	->Interrupt sensitive
 170:	83 ef       	ldi	r24, 0xF3	; 243
 172:	81 bb       	out	0x11, r24	; 17
	//SETTING TIMER
	TIMER0_Init();
 174:	0e 94 a2 00 	call	0x144	; 0x144 <TIMER0_Init>
	//SETTING EXTERNAL INTERRUPTS
	EXTERNAL_INTERRUPTS_Init();
 178:	0e 94 a9 00 	call	0x152	; 0x152 <EXTERNAL_INTERRUPTS_Init>
	//ENABLE INTERRUPTS
	sei();
 17c:	78 94       	sei
 17e:	08 95       	ret

00000180 <main>:



int main(void)
{
	INIT();
 180:	0e 94 b2 00 	call	0x164	; 0x164 <INIT>
 184:	ff cf       	rjmp	.-2      	; 0x184 <main+0x4>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
