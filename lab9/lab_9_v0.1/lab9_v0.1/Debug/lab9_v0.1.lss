
lab9_v0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000180  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006dc  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000601  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000300  00000000  00000000  00000f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000381  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000171  00000000  00000000  000016d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001842  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_1>
   8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_9>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  64:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_9>:


void TIMER0_Init(void){
	TCNT0= (unsigned char ) 100;
	TIMSK= (1<<TOIE0);	//mask on
	TCCR0= 0x03;		// Prescaler Bits cs2cs1cs0 was 0x04 now 0x03 for nearly 1ms
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	8f 93       	push	r24
  82:	9f 93       	push	r25
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	00 d0       	rcall	.+0      	; 0x8a <__vector_9+0x1e>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	84 e6       	ldi	r24, 0x64	; 100
  90:	82 bf       	out	0x32, r24	; 50
  92:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  9a:	99 b3       	in	r25, 0x19	; 25
  9c:	99 83       	std	Y+1, r25	; 0x01
  9e:	99 81       	ldd	r25, Y+1	; 0x01
  a0:	91 70       	andi	r25, 0x01	; 1
  a2:	99 83       	std	Y+1, r25	; 0x01
  a4:	99 b3       	in	r25, 0x19	; 25
  a6:	96 95       	lsr	r25
  a8:	9a 83       	std	Y+2, r25	; 0x02
  aa:	9a 81       	ldd	r25, Y+2	; 0x02
  ac:	91 70       	andi	r25, 0x01	; 1
  ae:	9a 83       	std	Y+2, r25	; 0x02
  b0:	81 11       	cpse	r24, r1
  b2:	13 c0       	rjmp	.+38     	; 0xda <__vector_9+0x6e>
  b4:	99 81       	ldd	r25, Y+1	; 0x01
  b6:	29 13       	cpse	r18, r25
  b8:	0e c0       	rjmp	.+28     	; 0xd6 <__vector_9+0x6a>
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	6a 81       	ldd	r22, Y+2	; 0x02
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	96 27       	eor	r25, r22
  c2:	49 2f       	mov	r20, r25
  c4:	41 70       	andi	r20, 0x01	; 1
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	24 17       	cp	r18, r20
  ca:	35 07       	cpc	r19, r21
  cc:	21 f4       	brne	.+8      	; 0xd6 <__vector_9+0x6a>
  ce:	29 81       	ldd	r18, Y+1	; 0x01
  d0:	9a 81       	ldd	r25, Y+2	; 0x02
  d2:	29 13       	cpse	r18, r25
  d4:	02 c0       	rjmp	.+4      	; 0xda <__vector_9+0x6e>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	0d c0       	rjmp	.+26     	; 0xf4 <__vector_9+0x88>
  da:	8a 30       	cpi	r24, 0x0A	; 10
  dc:	49 f4       	brne	.+18     	; 0xf0 <__vector_9+0x84>
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	88 0f       	add	r24, r24
  e8:	88 0f       	add	r24, r24
  ea:	8b bb       	out	0x1b, r24	; 27
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <__vector_9+0x88>
  f0:	81 11       	cpse	r24, r1
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	6f 91       	pop	r22
 106:	5f 91       	pop	r21
 108:	4f 91       	pop	r20
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <__vector_1>:
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	12 ba       	out	0x12, r1	; 18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <__vector_2>:
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	8f 93       	push	r24
 13a:	82 b3       	in	r24, 0x12	; 18
 13c:	80 61       	ori	r24, 0x10	; 16
 13e:	82 bb       	out	0x12, r24	; 18
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <EXTERNAL_INTERRUPTS_Init>:
}

void EXTERNAL_INTERRUPTS_Init(void){
	unsigned char * QMem =(unsigned char *)0x62;
	*QMem=0x00;
 14c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
	GICR|=(1<<INT0)|(1<<INT1);
 150:	8b b7       	in	r24, 0x3b	; 59
 152:	80 6c       	ori	r24, 0xC0	; 192
 154:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 0b00001010; //isc11,isc10 and isc01,isc00 both set to -> 01 (Any logical change will trigger them)
 156:	85 b7       	in	r24, 0x35	; 53
 158:	8a 60       	ori	r24, 0x0A	; 10
 15a:	85 bf       	out	0x35, r24	; 53
 15c:	08 95       	ret

0000015e <INIT>:

void INIT(){
	//MEMORY MAP DATA
	unsigned char * lastInputMem =(unsigned char *)0x60;
	unsigned char * stableSignalCounterMem =(unsigned char *)0x61;
	*lastInputMem=0X00;
 15e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	*stableSignalCounterMem=0x00;
 162:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
	
	//SETTING DATA DIRECTION REGISTERS
	DDRA=(unsigned char)0b01111100;	//PA0 PA1 PINs PA2			->Sampling
 166:	8c e7       	ldi	r24, 0x7C	; 124
 168:	8a bb       	out	0x1a, r24	; 26
	DDRD=(unsigned char)0b11110011; //PD2(INT0) PD3(INT1) PINs	->Interrupt sensitive
 16a:	83 ef       	ldi	r24, 0xF3	; 243
 16c:	81 bb       	out	0x11, r24	; 17
	//SETTING TIMER
	//TIMER0_Init();
	//SETTING EXTERNAL INTERRUPTS
	EXTERNAL_INTERRUPTS_Init();
 16e:	0e 94 a6 00 	call	0x14c	; 0x14c <EXTERNAL_INTERRUPTS_Init>
	//ENABLE INTERRUPTS
	sei();
 172:	78 94       	sei
 174:	08 95       	ret

00000176 <main>:



int main(void)
{
	INIT();
 176:	0e 94 af 00 	call	0x15e	; 0x15e <INIT>
 17a:	ff cf       	rjmp	.-2      	; 0x17a <main+0x4>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
