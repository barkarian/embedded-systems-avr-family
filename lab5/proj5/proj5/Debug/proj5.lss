
proj5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000937  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066e  00000000  00000000  00000d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046c  00000000  00000000  00001379  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000017e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f6  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000370  00000000  00000000  00001cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000206e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_9>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_11>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 50 01 	call	0x2a0	; 0x2a0 <main>
  64:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_9>:

//extern void ISR_timerOVF(void);
//extern void ISR_USART_Receive(void);

//INTERRUPTS
ISR(TIMER0_OVF_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
  7c:	ef 93       	push	r30
  7e:	ff 93       	push	r31
	unsigned char curNumber;
	//get from memory
	unsigned char * numberArray=(unsigned char *)0x60;
	unsigned char * ssdArray=(unsigned char *)0x68;
	unsigned char *tmp=(unsigned char *) 0x73;		//used for setting ringCounter and curNumberIndex
	curNumberIndex=*tmp;
  80:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__DATA_REGION_ORIGIN__+0x13>
	tmp++;
	ringCounter=*tmp;
  84:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
	//set counter for next interrupt
	TCNT0=0x64;
  88:	24 e6       	ldi	r18, 0x64	; 100
  8a:	22 bf       	out	0x32, r18	; 50
	//program logic
	if(curNumberIndex<7){
  8c:	87 30       	cpi	r24, 0x07	; 7
  8e:	18 f4       	brcc	.+6      	; 0x96 <__vector_9+0x2a>
		curNumberIndex++;
  90:	8f 5f       	subi	r24, 0xFF	; 255
		ringCounter = ringCounter<<1;	
  92:	99 0f       	add	r25, r25
  94:	02 c0       	rjmp	.+4      	; 0x9a <__vector_9+0x2e>
	}
	else{
		curNumberIndex=0;
		ringCounter=0b00000001;
  96:	91 e0       	ldi	r25, 0x01	; 1
	if(curNumberIndex<7){
		curNumberIndex++;
		ringCounter = ringCounter<<1;	
	}
	else{
		curNumberIndex=0;
  98:	80 e0       	ldi	r24, 0x00	; 0
		ringCounter=0b00000001;
	}
	//display changes
	PORTC=0x00;//close display
  9a:	15 ba       	out	0x15, r1	; 21
	curNumber=numberArray[curNumberIndex];//getting number
  9c:	e8 2f       	mov	r30, r24
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	e0 5a       	subi	r30, 0xA0	; 160
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
	PORTA=ssdArray[curNumber];//setting up SSD
  a4:	e0 81       	ld	r30, Z
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	e8 59       	subi	r30, 0x98	; 152
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	20 81       	ld	r18, Z
  ae:	2b bb       	out	0x1b, r18	; 27
	PORTC=ringCounter;//open display's right anode
  b0:	95 bb       	out	0x15, r25	; 21
	
	//set updated data in memory
	tmp=(unsigned char *) 0x73;
	*tmp=curNumberIndex;
  b2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__DATA_REGION_ORIGIN__+0x13>
	tmp++;
	*tmp=ringCounter;
  b6:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
}
  ba:	ff 91       	pop	r31
  bc:	ef 91       	pop	r30
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	2f 91       	pop	r18
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <clearAllNumbers>:

//numberArray[0 to 8] = 0x0A ->which means closed screens after SSD_decode
void clearAllNumbers(){
	unsigned char * numberArray=(unsigned char *)0x60;
	for(unsigned char i=0;i<=7;i++){
		numberArray[i]=(unsigned char)0x0A;//closed all segments number
  ce:	8a e0       	ldi	r24, 0x0A	; 10
  d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  d4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  dc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  e0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
  e4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
  e8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
  ec:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
  f0:	08 95       	ret

000000f2 <add_number_UDR>:

//add input to start of numberArray and shifts all the other numbers
void add_number_UDR(unsigned char input){
	unsigned char * numberArray=(unsigned char *)0x60;
	unsigned char placeholder,insertedValue;
	insertedValue=input&0x0F;
  f2:	8f 70       	andi	r24, 0x0F	; 15
  f4:	e0 e6       	ldi	r30, 0x60	; 96
  f6:	f0 e0       	ldi	r31, 0x00	; 0
	for(unsigned char i=0;i<=7;i++){
		placeholder=numberArray[i];
  f8:	90 81       	ld	r25, Z
		numberArray[i]=insertedValue;
  fa:	81 93       	st	Z+, r24
		insertedValue=placeholder;
  fc:	89 2f       	mov	r24, r25
//add input to start of numberArray and shifts all the other numbers
void add_number_UDR(unsigned char input){
	unsigned char * numberArray=(unsigned char *)0x60;
	unsigned char placeholder,insertedValue;
	insertedValue=input&0x0F;
	for(unsigned char i=0;i<=7;i++){
  fe:	e8 36       	cpi	r30, 0x68	; 104
 100:	f1 05       	cpc	r31, r1
 102:	d1 f7       	brne	.-12     	; 0xf8 <add_number_UDR+0x6>
		placeholder=numberArray[i];
		numberArray[i]=insertedValue;
		insertedValue=placeholder;
	}	
}
 104:	08 95       	ret

00000106 <USART_Init>:
}

void USART_Init( unsigned int ubrr)
{
    unsigned char *curState=(unsigned char *) 0x75;//set state init
	*curState=(unsigned char)INITstate;
 106:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
	/* Set baud rate */
    UBRRH = (unsigned char)(ubrr>>8);
 10a:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char)ubrr;
 10c:	89 b9       	out	0x09, r24	; 9
    /*Setting 0*/
    UCSRA=(unsigned char)0x00;
 10e:	1b b8       	out	0x0b, r1	; 11
    /* Enable receiver and transmitter */
    UCSRB = (1<<RXCIE)|(0<<UDRIE)|(1<<RXEN)|(1<<TXEN);
 110:	88 e9       	ldi	r24, 0x98	; 152
 112:	8a b9       	out	0x0a, r24	; 10
    /* Set frame format: 8data, 2stop bit */
    UCSRC = (0<<URSEL)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	80 bd       	out	0x20, r24	; 32
 118:	08 95       	ret

0000011a <TIMER0_Init>:
}

void TIMER0_Init(void){
    
    TCNT0= (unsigned char ) 100;
 11a:	84 e6       	ldi	r24, 0x64	; 100
 11c:	82 bf       	out	0x32, r24	; 50
    TIMSK= (1<<TOIE0); //mask on
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	89 bf       	out	0x39, r24	; 57
    TCCR0= (1<<CS02); //prescaller cs2cs1cs0 was 0x03 now 0x04 for nearly 30hz 
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	83 bf       	out	0x33, r24	; 51
 126:	08 95       	ret

00000128 <INIT>:


void INIT(){
	//memory map for data
	unsigned char *displayNumbers=(unsigned char *) 0x60;
	displayNumbers[0]=(unsigned char)0x05;
 128:	85 e0       	ldi	r24, 0x05	; 5
 12a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	displayNumbers[1]=(unsigned char)0x06;
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
	displayNumbers[2]=(unsigned char)0x07;
 134:	97 e0       	ldi	r25, 0x07	; 7
 136:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
	displayNumbers[3]=(unsigned char)0x08;
 13a:	28 e0       	ldi	r18, 0x08	; 8
 13c:	20 93 63 00 	sts	0x0063, r18	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	displayNumbers[4]=(unsigned char)0x09;
 140:	29 e0       	ldi	r18, 0x09	; 9
 142:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
	displayNumbers[5]=(unsigned char)0x00;
 146:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
	displayNumbers[6]=(unsigned char)0x01;
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
	displayNumbers[7]=(unsigned char)0x02;
 150:	32 e0       	ldi	r19, 0x02	; 2
 152:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
	unsigned char *seven_segment_decoder=(unsigned char *) 0x68;
	seven_segment_decoder[0]=(unsigned char)0b00000001; //0
 156:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	seven_segment_decoder[1]=(unsigned char)0b01001111; //1
 15a:	2f e4       	ldi	r18, 0x4F	; 79
 15c:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	seven_segment_decoder[2]=(unsigned char)0b00010010; //2
 160:	22 e1       	ldi	r18, 0x12	; 18
 162:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
	seven_segment_decoder[3]=(unsigned char)0b00000110; //3
 166:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
	seven_segment_decoder[4]=(unsigned char)0b01001100; //4
 16a:	8c e4       	ldi	r24, 0x4C	; 76
 16c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	seven_segment_decoder[5]=(unsigned char)0b00100100; //5
 170:	84 e2       	ldi	r24, 0x24	; 36
 172:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
	seven_segment_decoder[6]=(unsigned char)0b00100000; //6
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	seven_segment_decoder[7]=(unsigned char)0b00001111; //7
 17c:	8f e0       	ldi	r24, 0x0F	; 15
 17e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	seven_segment_decoder[8]=(unsigned char)0b00000000; //8
 182:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	seven_segment_decoder[9]=(unsigned char)0b00000100; //9
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
	seven_segment_decoder[10]=(unsigned char)0b11111111; //A
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
	unsigned char *curNumberIndex=(unsigned char *) 0x73; //r17 value
	*curNumberIndex=(unsigned char)0x07;
 192:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__DATA_REGION_ORIGIN__+0x13>
	unsigned char *ringCounter=(unsigned char *) 0x74; //r17 value
	*ringCounter=(unsigned char)0x80;
 196:	90 e8       	ldi	r25, 0x80	; 128
 198:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
	
	//masks for ports a and c
	//i just realise in the past labs i use port B as my port A
	//so i fixed this in this one
	DDRC=(unsigned char) 0xff;
 19c:	84 bb       	out	0x14, r24	; 20
	DDRA=(unsigned char)0b01111111;
 19e:	8f e7       	ldi	r24, 0x7F	; 127
 1a0:	8a bb       	out	0x1a, r24	; 26
	asm("nop");
 1a2:	00 00       	nop

    unsigned int ubrr= (unsigned int)UBRR;
	
    USART_Init(ubrr);
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	9f ef       	ldi	r25, 0xFF	; 255
 1a8:	0e 94 83 00 	call	0x106	; 0x106 <USART_Init>
    TIMER0_Init();
 1ac:	0e 94 8d 00 	call	0x11a	; 0x11a <TIMER0_Init>
	sei();
 1b0:	78 94       	sei
 1b2:	08 95       	ret

000001b4 <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
 1b4:	5d 9b       	sbis	0x0b, 5	; 11
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <USART_Transmit>
;
/* Put data into buffer, sends the data */
TCNT2 = data;
 1b8:	84 bd       	out	0x24, r24	; 36
 1ba:	08 95       	ret

000001bc <USART_Transmit_OK>:
}

void USART_Transmit_OK()
{
USART_Transmit((unsigned char)0x4F); //O
 1bc:	8f e4       	ldi	r24, 0x4F	; 79
 1be:	0e 94 da 00 	call	0x1b4	; 0x1b4 <USART_Transmit>
USART_Transmit((unsigned char)0x4B); //K
 1c2:	8b e4       	ldi	r24, 0x4B	; 75
 1c4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <USART_Transmit>
USART_Transmit((unsigned char)0x0D); //<CR>
 1c8:	8d e0       	ldi	r24, 0x0D	; 13
 1ca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <USART_Transmit>
USART_Transmit((unsigned char)0x0A); //<LF>
 1ce:	8a e0       	ldi	r24, 0x0A	; 10
 1d0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <USART_Transmit>
 1d4:	08 95       	ret

000001d6 <__vector_11>:
	*tmp=curNumberIndex;
	tmp++;
	*tmp=ringCounter;
}

ISR(USART_RXC_vect){
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	2f 93       	push	r18
 1e2:	3f 93       	push	r19
 1e4:	4f 93       	push	r20
 1e6:	5f 93       	push	r21
 1e8:	6f 93       	push	r22
 1ea:	7f 93       	push	r23
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
	//get from memory
	unsigned char *stateMem=(unsigned char *) 0x75;
	//get input from usart
	unsigned char input=UDR;
 1f8:	8c b1       	in	r24, 0x0c	; 12
	input=UDR;
 1fa:	8c b1       	in	r24, 0x0c	; 12
	
	//For simulation purposes
	unsigned char *simData =0x76;
	__asm__(
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	a6 e7       	ldi	r26, 0x76	; 118
 200:	fc 92       	st	X, r15
 202:	00 00       	nop
	"ldi XH,0x00\n"
	"ldi XL,0x76\n"
	"st X,r15\n"
	"nop\n"
	);
	input=*simData;
 204:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__DATA_REGION_ORIGIN__+0x16>
	
	//FSM
	switch (*stateMem){
 208:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 20c:	92 30       	cpi	r25, 0x02	; 2
 20e:	29 f1       	breq	.+74     	; 0x25a <__vector_11+0x84>
 210:	28 f4       	brcc	.+10     	; 0x21c <__vector_11+0x46>
 212:	99 23       	and	r25, r25
 214:	41 f0       	breq	.+16     	; 0x226 <__vector_11+0x50>
 216:	91 30       	cpi	r25, 0x01	; 1
 218:	e1 f0       	breq	.+56     	; 0x252 <__vector_11+0x7c>
 21a:	31 c0       	rjmp	.+98     	; 0x27e <__vector_11+0xa8>
 21c:	93 30       	cpi	r25, 0x03	; 3
 21e:	39 f1       	breq	.+78     	; 0x26e <__vector_11+0x98>
 220:	94 30       	cpi	r25, 0x04	; 4
 222:	49 f1       	breq	.+82     	; 0x276 <__vector_11+0xa0>
 224:	2c c0       	rjmp	.+88     	; 0x27e <__vector_11+0xa8>
    case INITstate:			//A or N or C just Came
		if(input=='A'){
 226:	81 34       	cpi	r24, 0x41	; 65
 228:	21 f4       	brne	.+8      	; 0x232 <__vector_11+0x5c>
			*stateMem=TWAITstate;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 230:	26 c0       	rjmp	.+76     	; 0x27e <__vector_11+0xa8>
		}else if (input=='N'){
 232:	8e 34       	cpi	r24, 0x4E	; 78
 234:	31 f4       	brne	.+12     	; 0x242 <__vector_11+0x6c>
			clearAllNumbers();
 236:	0e 94 67 00 	call	0xce	; 0xce <clearAllNumbers>
			*stateMem=BYTEOUTstate;
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 240:	1e c0       	rjmp	.+60     	; 0x27e <__vector_11+0xa8>
		}else if(input=='C'){
 242:	83 34       	cpi	r24, 0x43	; 67
 244:	e1 f4       	brne	.+56     	; 0x27e <__vector_11+0xa8>
			clearAllNumbers();
 246:	0e 94 67 00 	call	0xce	; 0xce <clearAllNumbers>
			*stateMem=CRWAITstate;
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 250:	16 c0       	rjmp	.+44     	; 0x27e <__vector_11+0xa8>
		}
      break;
    case TWAITstate:		//T Just Came
		*stateMem=CRWAITstate;
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
      // statements
      break;
 258:	12 c0       	rjmp	.+36     	; 0x27e <__vector_11+0xa8>
	case BYTEOUTstate:		//BYTE or CR Just Came
		if(input==0x0D){//<CR> ASCII code is 0x0D
 25a:	8d 30       	cpi	r24, 0x0D	; 13
 25c:	21 f4       	brne	.+8      	; 0x266 <__vector_11+0x90>
			*stateMem=LFWAITstate;
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 264:	0c c0       	rjmp	.+24     	; 0x27e <__vector_11+0xa8>
		}else{				//NUMBER Just Came
			add_number_UDR(input);
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 79 00 	call	0xf2	; 0xf2 <add_number_UDR>
 26c:	08 c0       	rjmp	.+16     	; 0x27e <__vector_11+0xa8>
			// *stateMem Does Not Change
		}
	  break;
	case CRWAITstate:		//CR Just Came
		*stateMem=LFWAITstate;
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
      break;
 274:	04 c0       	rjmp	.+8      	; 0x27e <__vector_11+0xa8>
    case LFWAITstate:		//LF Just Came
		USART_Transmit_OK();
 276:	0e 94 de 00 	call	0x1bc	; 0x1bc <USART_Transmit_OK>
		*stateMem=INITstate;
 27a:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
      break;
    default:
		break;
	}
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <main>:
}


int main(void)
{
	INIT();
 2a0:	0e 94 94 00 	call	0x128	; 0x128 <INIT>
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <main+0x4>

000002a6 <_exit>:
 2a6:	f8 94       	cli

000002a8 <__stop_program>:
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <__stop_program>
