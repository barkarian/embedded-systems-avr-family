
lab7n8_v1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000046a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c3a  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073f  00000000  00000000  000011fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000068b  00000000  00000000  0000193d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d4  00000000  00000000  00001fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000566  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005f9  00000000  00000000  00002702  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002cfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
   8:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
   c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  10:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  14:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  18:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  1c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  20:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  24:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_9>
  28:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  2c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_11>
  30:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  34:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  38:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  3c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  40:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  44:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  48:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  4c:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  50:	0c 94 3b 00 	jmp	0x76	; 0x76 <__bad_interrupt>
  54:	fa 00       	.word	0x00fa	; ????
  56:	22 01       	movw	r4, r4
  58:	26 01       	movw	r4, r12
  5a:	32 01       	movw	r6, r4
  5c:	36 01       	movw	r6, r12
  5e:	3b 01       	movw	r6, r22
  60:	4c 01       	movw	r8, r24

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d4 e0       	ldi	r29, 0x04	; 4
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61
  6e:	0e 94 07 02 	call	0x40e	; 0x40e <main>
  72:	0c 94 33 02 	jmp	0x466	; 0x466 <_exit>

00000076 <__bad_interrupt>:
  76:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007a <clearAllNumbers>:
unsigned char maskAndSetBit(unsigned char input){
	unsigned char maskedInput=input & 0x0F;
	unsigned char compProcessFlag;
	compProcessFlag = 1<<(maskedInput-1);
	return compProcessFlag;
}
  7a:	8a e0       	ldi	r24, 0x0A	; 10
  7c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  80:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  84:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  88:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  8c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
  90:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
  94:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
  98:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
  9c:	08 95       	ret

0000009e <add_number_UDR>:
  9e:	8f 70       	andi	r24, 0x0F	; 15
  a0:	e0 e6       	ldi	r30, 0x60	; 96
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	90 81       	ld	r25, Z
  a6:	81 93       	st	Z+, r24
  a8:	89 2f       	mov	r24, r25
  aa:	e8 36       	cpi	r30, 0x68	; 104
  ac:	f1 05       	cpc	r31, r1
  ae:	d1 f7       	brne	.-12     	; 0xa4 <add_number_UDR+0x6>
  b0:	08 95       	ret

000000b2 <USART_Init>:
  b2:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
  b6:	90 bd       	out	0x20, r25	; 32
  b8:	89 b9       	out	0x09, r24	; 9
  ba:	1b b8       	out	0x0b, r1	; 11
  bc:	88 e9       	ldi	r24, 0x98	; 152
  be:	8a b9       	out	0x0a, r24	; 10
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	80 bd       	out	0x20, r24	; 32
  c4:	08 95       	ret

000000c6 <TIMER0_Init>:
  c6:	84 e6       	ldi	r24, 0x64	; 100
  c8:	82 bf       	out	0x32, r24	; 50
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	89 bf       	out	0x39, r24	; 57
  ce:	84 e0       	ldi	r24, 0x04	; 4
  d0:	83 bf       	out	0x33, r24	; 51
  d2:	08 95       	ret

000000d4 <INIT>:
  d4:	85 e0       	ldi	r24, 0x05	; 5
  d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  e2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  e6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
  ea:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
  ee:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
  f2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
  fc:	8f e4       	ldi	r24, 0x4F	; 79
  fe:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
 102:	82 e1       	ldi	r24, 0x12	; 18
 104:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
 10e:	8c e4       	ldi	r24, 0x4C	; 76
 110:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
 114:	84 e2       	ldi	r24, 0x24	; 36
 116:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
 11a:	80 e2       	ldi	r24, 0x20	; 32
 11c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 120:	8f e0       	ldi	r24, 0x0F	; 15
 122:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 126:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
 136:	27 e0       	ldi	r18, 0x07	; 7
 138:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <__DATA_REGION_ORIGIN__+0x13>
 13c:	20 e8       	ldi	r18, 0x80	; 128
 13e:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
 142:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <__DATA_REGION_ORIGIN__+0x17>
 146:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 14a:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 14e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 152:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
 156:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__DATA_REGION_ORIGIN__+0x1d>
 15a:	84 bb       	out	0x14, r24	; 20
 15c:	8f e7       	ldi	r24, 0x7F	; 127
 15e:	8a bb       	out	0x1a, r24	; 26
 160:	00 00       	nop
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	9f ef       	ldi	r25, 0xFF	; 255
 166:	0e 94 59 00 	call	0xb2	; 0xb2 <USART_Init>
 16a:	0e 94 63 00 	call	0xc6	; 0xc6 <TIMER0_Init>
 16e:	78 94       	sei
 170:	08 95       	ret

00000172 <USART_Transmit>:
 172:	5d 9b       	sbis	0x0b, 5	; 11
 174:	fe cf       	rjmp	.-4      	; 0x172 <USART_Transmit>
 176:	84 bd       	out	0x24, r24	; 36
 178:	08 95       	ret

0000017a <USART_Transmit_OK>:
 17a:	8f e4       	ldi	r24, 0x4F	; 79
 17c:	0e 94 b9 00 	call	0x172	; 0x172 <USART_Transmit>
 180:	8b e4       	ldi	r24, 0x4B	; 75
 182:	0e 94 b9 00 	call	0x172	; 0x172 <USART_Transmit>
 186:	8d e0       	ldi	r24, 0x0D	; 13
 188:	0e 94 b9 00 	call	0x172	; 0x172 <USART_Transmit>
 18c:	8a e0       	ldi	r24, 0x0A	; 10
 18e:	0e 94 b9 00 	call	0x172	; 0x172 <USART_Transmit>
 192:	08 95       	ret

00000194 <__vector_11>:
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	1f 92       	push	r1
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	8c b1       	in	r24, 0x0c	; 12
 1c2:	89 83       	std	Y+1, r24	; 0x01
 1c4:	8c b1       	in	r24, 0x0c	; 12
 1c6:	89 83       	std	Y+1, r24	; 0x01
 1c8:	b0 e0       	ldi	r27, 0x00	; 0
 1ca:	a6 e7       	ldi	r26, 0x76	; 118
 1cc:	fc 92       	st	X, r15
 1ce:	00 00       	nop
 1d0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__DATA_REGION_ORIGIN__+0x16>
 1d4:	89 83       	std	Y+1, r24	; 0x01
 1d6:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 1da:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 1de:	8e 2f       	mov	r24, r30
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	87 30       	cpi	r24, 0x07	; 7
 1e4:	91 05       	cpc	r25, r1
 1e6:	08 f0       	brcs	.+2      	; 0x1ea <__vector_11+0x56>
 1e8:	68 c0       	rjmp	.+208    	; 0x2ba <__vector_11+0x126>
 1ea:	fc 01       	movw	r30, r24
 1ec:	e6 5d       	subi	r30, 0xD6	; 214
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__tablejump2__>
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	81 34       	cpi	r24, 0x41	; 65
 1f8:	21 f4       	brne	.+8      	; 0x202 <__vector_11+0x6e>
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 200:	5c c0       	rjmp	.+184    	; 0x2ba <__vector_11+0x126>
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	8e 34       	cpi	r24, 0x4E	; 78
 206:	31 f4       	brne	.+12     	; 0x214 <__vector_11+0x80>
 208:	0e 94 3d 00 	call	0x7a	; 0x7a <clearAllNumbers>
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 212:	53 c0       	rjmp	.+166    	; 0x2ba <__vector_11+0x126>
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	83 34       	cpi	r24, 0x43	; 67
 218:	31 f4       	brne	.+12     	; 0x226 <__vector_11+0x92>
 21a:	0e 94 3d 00 	call	0x7a	; 0x7a <clearAllNumbers>
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 224:	4a c0       	rjmp	.+148    	; 0x2ba <__vector_11+0x126>
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	83 35       	cpi	r24, 0x53	; 83
 22a:	21 f4       	brne	.+8      	; 0x234 <__vector_11+0xa0>
 22c:	85 e0       	ldi	r24, 0x05	; 5
 22e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 232:	43 c0       	rjmp	.+134    	; 0x2ba <__vector_11+0x126>
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	81 35       	cpi	r24, 0x51	; 81
 238:	09 f0       	breq	.+2      	; 0x23c <__vector_11+0xa8>
 23a:	3f c0       	rjmp	.+126    	; 0x2ba <__vector_11+0x126>
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 242:	3b c0       	rjmp	.+118    	; 0x2ba <__vector_11+0x126>
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 24a:	37 c0       	rjmp	.+110    	; 0x2ba <__vector_11+0x126>
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	8d 30       	cpi	r24, 0x0D	; 13
 250:	21 f4       	brne	.+8      	; 0x25a <__vector_11+0xc6>
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 258:	30 c0       	rjmp	.+96     	; 0x2ba <__vector_11+0x126>
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 4f 00 	call	0x9e	; 0x9e <add_number_UDR>
 262:	2b c0       	rjmp	.+86     	; 0x2ba <__vector_11+0x126>
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 26a:	27 c0       	rjmp	.+78     	; 0x2ba <__vector_11+0x126>
 26c:	0e 94 bd 00 	call	0x17a	; 0x17a <USART_Transmit_OK>
 270:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 274:	22 c0       	rjmp	.+68     	; 0x2ba <__vector_11+0x126>
 276:	39 81       	ldd	r19, Y+1	; 0x01
 278:	3f 70       	andi	r19, 0x0F	; 15
 27a:	31 50       	subi	r19, 0x01	; 1
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <__vector_11+0xf2>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	3a 95       	dec	r19
 288:	e2 f7       	brpl	.-8      	; 0x282 <__vector_11+0xee>
 28a:	28 2b       	or	r18, r24
 28c:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 296:	11 c0       	rjmp	.+34     	; 0x2ba <__vector_11+0x126>
 298:	39 81       	ldd	r19, Y+1	; 0x01
 29a:	3f 70       	andi	r19, 0x0F	; 15
 29c:	31 50       	subi	r19, 0x01	; 1
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <__vector_11+0x114>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	3a 95       	dec	r19
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <__vector_11+0x110>
 2ac:	80 95       	com	r24
 2ae:	28 23       	and	r18, r24
 2b0:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 2b4:	83 e0       	ldi	r24, 0x03	; 3
 2b6:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__DATA_REGION_ORIGIN__+0x15>
 2ba:	0f 90       	pop	r0
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <sliceCounterFlag>:
 2e2:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <__DATA_REGION_ORIGIN__+0x17>
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	21 f4       	brne	.+8      	; 0x2f2 <sliceCounterFlag+0x10>
 2ea:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <sliceCounterFlag+0x12>
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
 2f4:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <__DATA_REGION_ORIGIN__+0x17>
 2f8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 2fc:	08 95       	ret

000002fe <findNextProcess>:
 2fe:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 302:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	09 f4       	brne	.+2      	; 0x312 <findNextProcess+0x14>
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	9a 01       	movw	r18, r20
 314:	08 2e       	mov	r0, r24
 316:	02 c0       	rjmp	.+4      	; 0x31c <findNextProcess+0x1e>
 318:	22 0f       	add	r18, r18
 31a:	33 1f       	adc	r19, r19
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <findNextProcess+0x1a>
 320:	29 23       	and	r18, r25
 322:	99 f3       	breq	.-26     	; 0x30a <findNextProcess+0xc>
 324:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 328:	08 95       	ret

0000032a <__vector_9>:
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	1f 93       	push	r17
 336:	2f 93       	push	r18
 338:	3f 93       	push	r19
 33a:	4f 93       	push	r20
 33c:	5f 93       	push	r21
 33e:	6f 93       	push	r22
 340:	7f 93       	push	r23
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	af 93       	push	r26
 348:	bf 93       	push	r27
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31
 352:	c0 91 73 00 	lds	r28, 0x0073	; 0x800073 <__DATA_REGION_ORIGIN__+0x13>
 356:	d0 91 74 00 	lds	r29, 0x0074	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
 35a:	84 e6       	ldi	r24, 0x64	; 100
 35c:	82 bf       	out	0x32, r24	; 50
 35e:	c7 30       	cpi	r28, 0x07	; 7
 360:	18 f4       	brcc	.+6      	; 0x368 <__vector_9+0x3e>
 362:	cf 5f       	subi	r28, 0xFF	; 255
 364:	dd 0f       	add	r29, r29
 366:	02 c0       	rjmp	.+4      	; 0x36c <__vector_9+0x42>
 368:	d1 e0       	ldi	r29, 0x01	; 1
 36a:	c0 e0       	ldi	r28, 0x00	; 0
 36c:	15 ba       	out	0x15, r1	; 21
 36e:	ec 2f       	mov	r30, r28
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	e0 5a       	subi	r30, 0xA0	; 160
 374:	ff 4f       	sbci	r31, 0xFF	; 255
 376:	e0 81       	ld	r30, Z
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	e8 59       	subi	r30, 0x98	; 152
 37c:	ff 4f       	sbci	r31, 0xFF	; 255
 37e:	80 81       	ld	r24, Z
 380:	8b bb       	out	0x1b, r24	; 27
 382:	d5 bb       	out	0x15, r29	; 21
 384:	10 91 7a 00 	lds	r17, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 388:	0e 94 71 01 	call	0x2e2	; 0x2e2 <sliceCounterFlag>
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	39 f4       	brne	.+14     	; 0x39e <__vector_9+0x74>
 390:	11 23       	and	r17, r17
 392:	19 f0       	breq	.+6      	; 0x39a <__vector_9+0x70>
 394:	0e 94 7f 01 	call	0x2fe	; 0x2fe <findNextProcess>
 398:	02 c0       	rjmp	.+4      	; 0x39e <__vector_9+0x74>
 39a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 39e:	c0 93 73 00 	sts	0x0073, r28	; 0x800073 <__DATA_REGION_ORIGIN__+0x13>
 3a2:	d0 93 74 00 	sts	0x0074, r29	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
 3a6:	ff 91       	pop	r31
 3a8:	ef 91       	pop	r30
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	1f 91       	pop	r17
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <ringCounterRightProc>:

//PROCESS1
//0x01 → 0x02 → ... → 0x80→ 0x01 → ...
void ringCounterRightProc(){
	unsigned char * ringCounterMem=(unsigned char *) 0x7B;
	unsigned char ringCounter=* ringCounterMem;
 3ce:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	if(ringCounter==0x80){
 3d2:	80 38       	cpi	r24, 0x80	; 128
 3d4:	11 f0       	breq	.+4      	; 0x3da <ringCounterRightProc+0xc>
		ringCounter=0x01;
	}else{
		ringCounter=ringCounter<<1;
 3d6:	88 0f       	add	r24, r24
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <ringCounterRightProc+0xe>
//0x01 → 0x02 → ... → 0x80→ 0x01 → ...
void ringCounterRightProc(){
	unsigned char * ringCounterMem=(unsigned char *) 0x7B;
	unsigned char ringCounter=* ringCounterMem;
	if(ringCounter==0x80){
		ringCounter=0x01;
 3da:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		ringCounter=ringCounter<<1;
	}
	PORTB=ringCounter;
 3dc:	88 bb       	out	0x18, r24	; 24
	*ringCounterMem=ringCounter;
 3de:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
 3e2:	08 95       	ret

000003e4 <ringCounterLeftProc>:
}
//PROCESS2
//0x80 → 0x40 → ... → 0x01→ 0x80 → ...
void ringCounterLeftProc(){
	unsigned char *ringCounterMem=(unsigned char *) 0x7C;
	unsigned char ringCounter=* ringCounterMem;
 3e4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	if(ringCounter==0x80){
 3e8:	80 38       	cpi	r24, 0x80	; 128
 3ea:	11 f0       	breq	.+4      	; 0x3f0 <ringCounterLeftProc+0xc>
		ringCounter=0x01;
		}else{
		ringCounter=ringCounter>>1;
 3ec:	86 95       	lsr	r24
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <ringCounterLeftProc+0xe>
//0x80 → 0x40 → ... → 0x01→ 0x80 → ...
void ringCounterLeftProc(){
	unsigned char *ringCounterMem=(unsigned char *) 0x7C;
	unsigned char ringCounter=* ringCounterMem;
	if(ringCounter==0x80){
		ringCounter=0x01;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
		}else{
		ringCounter=ringCounter>>1;
	}
	PORTB=ringCounter;
 3f2:	88 bb       	out	0x18, r24	; 24
	*ringCounterMem=ringCounter;
 3f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 3f8:	08 95       	ret

000003fa <zerosToOnesAndBack>:
//PROCESS3
//0x80 → 0x40 → ... → 0x01→ 0x80 → ...
void zerosToOnesAndBack(){	//makes 0x00 → 0xFF → 0x00 → ...
	unsigned char *valueMem=(unsigned char *) 0x7D;
	unsigned char value=* valueMem;
	if(value==0x00){
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__DATA_REGION_ORIGIN__+0x1d>
 400:	91 11       	cpse	r25, r1
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	81 95       	neg	r24
		value=0xFF;
		}else{
		value=0x00;
		}
	PORTB=value;
 406:	88 bb       	out	0x18, r24	; 24
	*valueMem=value;
 408:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__DATA_REGION_ORIGIN__+0x1d>
 40c:	08 95       	ret

0000040e <main>:




int main(void)
{
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	00 d0       	rcall	.+0      	; 0x414 <main+0x6>
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
	INIT();
 418:	0e 94 6a 00 	call	0xd4	; 0xd4 <INIT>
	unsigned char *sliceFlagMem=(unsigned char *) 0x78;
	unsigned char *curProcessMem=(unsigned char *) 0x79;
	unsigned char volatile sliceFlag;
	unsigned char volatile curProcess=*curProcessMem;
 41c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 420:	8a 83       	std	Y+2, r24	; 0x02
	while (1)
	{
	if(sliceFlag==0x01){
			//run code
			curProcess=*curProcessMem;
 422:	a9 e7       	ldi	r26, 0x79	; 121
 424:	b0 e0       	ldi	r27, 0x00	; 0
				break;
				case 0x02:
				asm("call zerosToOnesAndBack");
				break;
			}
		*sliceFlagMem=0x00;
 426:	e8 e7       	ldi	r30, 0x78	; 120
 428:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned char *curProcessMem=(unsigned char *) 0x79;
	unsigned char volatile sliceFlag;
	unsigned char volatile curProcess=*curProcessMem;
	while (1)
	{
	if(sliceFlag==0x01){
 42a:	89 81       	ldd	r24, Y+1	; 0x01
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	91 f4       	brne	.+36     	; 0x454 <main+0x46>
			//run code
			curProcess=*curProcessMem;
 430:	8c 91       	ld	r24, X
 432:	8a 83       	std	Y+2, r24	; 0x02
			switch(curProcess){
 434:	8a 81       	ldd	r24, Y+2	; 0x02
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	39 f0       	breq	.+14     	; 0x448 <main+0x3a>
 43a:	18 f0       	brcs	.+6      	; 0x442 <main+0x34>
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	39 f0       	breq	.+14     	; 0x44e <main+0x40>
 440:	08 c0       	rjmp	.+16     	; 0x452 <main+0x44>
				case 0x00:
				asm("call ringCounterRightProc");
 442:	0e 94 e7 01 	call	0x3ce	; 0x3ce <ringCounterRightProc>
				break;
 446:	05 c0       	rjmp	.+10     	; 0x452 <main+0x44>
				case 0x01:
				asm("call ringCounterLeftProc");
 448:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <ringCounterLeftProc>
				break;
 44c:	02 c0       	rjmp	.+4      	; 0x452 <main+0x44>
				case 0x02:
				asm("call zerosToOnesAndBack");
 44e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <zerosToOnesAndBack>
				break;
			}
		*sliceFlagMem=0x00;
 452:	10 82       	st	Z, r1
		}
	sliceFlag = *sliceFlagMem;
 454:	80 81       	ld	r24, Z
 456:	89 83       	std	Y+1, r24	; 0x01
	}
 458:	e8 cf       	rjmp	.-48     	; 0x42a <main+0x1c>

0000045a <__tablejump2__>:
 45a:	ee 0f       	add	r30, r30
 45c:	ff 1f       	adc	r31, r31
 45e:	05 90       	lpm	r0, Z+
 460:	f4 91       	lpm	r31, Z
 462:	e0 2d       	mov	r30, r0
 464:	09 94       	ijmp

00000466 <_exit>:
 466:	f8 94       	cli

00000468 <__stop_program>:
 468:	ff cf       	rjmp	.-2      	; 0x468 <__stop_program>
